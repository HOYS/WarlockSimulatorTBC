@using Shared.Classes;
@using Shared.Classes.UI;

@inject Blazored.LocalStorage.ILocalStorageService localStorage

<section id="sim-settings">
    <fieldset>
        <legend>Rotation Options</legend>
        <input checked="@(SimulationSettings.settings["rotationOption"] == "simChooses")" @onchange="@(async () => { SimulationSettings.settings["rotationOption"] = "simChooses"; await RefreshRotationSpells.InvokeAsync(); })" type='radio' name='rotationOption' />
        <label for='simChooses'>Simulation chooses spells for me</label>
        <br>
        <input checked="@(SimulationSettings.settings["rotationOption"] == "userChooses")" @onchange="@(async () => { SimulationSettings.settings["rotationOption"] = "userChooses"; await RefreshRotationSpells.InvokeAsync(); })" type='radio' name='rotationOption' />
        <label for='userChooses'>Choose spells myself</label>
    </fieldset>
    <ul>
        <li>
            <span class="settings-left">Race</span>
            <select @bind="@(SimulationSettings.settings["race"])" name="race" id="race-dropdown-list" class="settings-right">
                <option value="gnome">Gnome</option>
                <option value="human">Human</option>
                <option value="orc">Orc</option>
                <option value="undead">Undead</option>
                <option value="bloodElf">Blood Elf</option>
            </select>
        </li>
        <li>
            <span class="settings-left">Iterations</span>
            <input @bind="@(SimulationSettings.settings["iterations"])" id="iterations" step='1000' min="0" type="number" name="iterations" class="settings-right">
        </li>
        <li>
            <span class="settings-left">Min Fight Length</span>
            <input @bind="@(SimulationSettings.settings["min-fight-length"])" id="min-fight-length" type="number" name="min-fight-length" class="settings-right">
        </li>
        <li>
            <span class="settings-left">Max Fight Length</span>
            <input @bind="@(SimulationSettings.settings["max-fight-length"])" id="max-fight-length" type="number" name="max-fight-length" class="settings-right">
        </li>
        <li>
            <span class="settings-left">Target Level</span>
            <input @bind="@(SimulationSettings.settings["target-level"])" id="target-level" type="number" name="target-level" class="settings-right">
        </li>
        <li>
            <span class="settings-left">Target Shadow Resistance</span>
            <input @bind="@(SimulationSettings.settings["target-shadow-resistance"])" id="target-shadow-resistance" type="number" name="target-shadow-resistance" class="settings-right">
        </li>
        <li>
            <span class="settings-left">Target Fire Resistance</span>
            <input @bind="@(SimulationSettings.settings["target-fire-resistance"])" id="target-fire-resistance" type="number" name="target-fire-resistance" class="settings-right">
        </li>
        <li id='automatically-open-sim-details'>
            <label class="settings-left" for="automatically-open-sim-details">Show Damage & Aura Tables</label>
            <select @bind="@(SimulationSettings.settings["automatically-open-sim-details"])" class="settings-right" name="automatically-open-sim-details">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </select>
        </li>
        <li id='randomizeValues' title="Chooses a random value between a minimum and a maximum value instead of taking the average of the two.">
            <label class="settings-left" for="randomizeValues">Randomize instead of averaging</label>
            <select @bind="@(SimulationSettings.settings["randomizeValues"])" class="settings-right" name="randomizeValues">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </select>
        </li>
        <li id="infinitePlayerMana">
            <label class="settings-left" for="infinitePlayerMana">Infinite player mana?</label>
            <select @bind="@(SimulationSettings.settings["infinitePlayerMana"])" class="settings-right" name="infinitePlayerMana">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </select>
        </li>
        <li id="infinitePetMana">
            <label class="settings-left" for="infinitePetMana">Infinite pet mana?</label>
            <select @bind="@(SimulationSettings.settings["infinitePetMana"])" class="settings-right" name="infinitePetMana">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </select>
        </li>
        <li id='petChoice'>
            <label class="settings-left" for="petChoice">Pet</label>
            <select @bind="@(SimulationSettings.settings["petChoice"])" class="settings-right" name="petChoice">
                <option value="0">Imp</option>
                <option value="2">Succubus</option>
                <option value="4">Felguard</option>
            </select>
        </li>
        @if (ShowSacrificePetOption())
        {
            <li id="sacrificePet">
                <label class="settings-left" for="sacrificePet">Sacrifice pet?</label>
                <select @bind="@(SimulationSettings.settings["sacrificePet"])" class="settings-right" name="sacrificePet">
                    <option value="no">No</option>
                    <option value="yes">Yes</option>
                </select>
            </li>
        }
        @if (ShowPetModeOption())
        {
            <li id="petMode">
                <label class="settings-left" for="petMode">Pet mode</label>
                <select @bind="@(SimulationSettings.settings["petMode"])" class="settings-right" name="petMode">
                    <option value="0">Passive</option>
                    <option value="1">Aggressive</option>
                </select>
            </li>
        }
        <li id="prepopBlackBook">
            <label class="settings-left" for="prepopBlackBook">Prepop Black Book?</label>
            <select @bind="@(SimulationSettings.settings["prepopBlackBook"])" class="settings-right" name="prepopBlackBook">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </select>
        </li>
        <li id="shattrathFaction">
            <label class="settings-left" for="shattrathFaction">Shattrath Faction</label>
            <select @bind="@(SimulationSettings.settings["shattrathFaction"])" class="settings-right" name="shattrathFaction">
                <option value="Aldor">Aldor</option>
                <option value="Scryers">Scryers</option>
            </select>
        </li>
        <li id="shattrathFactionReputation">
            <label class="settings-left" for="shattrathFactionReputation">Exalted with Shattrath Faction</label>
            <select @bind="@(SimulationSettings.settings["shattrathFactionReputation"])" class="settings-right" name="shattrathFactionReputation">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </select>
        </li>
        @if (SimulationSettings.settings["petChoice"] == "2" && (!ShowPetModeOption() || SimulationSettings.settings["petMode"] == "1") && (!ShowSacrificePetOption() || SimulationSettings.settings["sacrificePet"] == "no"))
        {
            <li id="lashOfPainUsage">
                <label class='settings-left' for='lashOfPainUsage'>When to use Lash of Pain?</label>
                <select @bind="@(SimulationSettings.settings["lashOfPainUsage"])" class='settings-right' name='lashOfPainUsage'>
                    <option value='noISB'>When ISB is not up</option>
                    <option value='onCooldown'>On Cooldown</option>
                </select>
            </li>
        }
        <li id="enemyArmor">
            <label class="settings-left" for="enemyArmor">Enemy Armor</label>
            <input @bind="@(SimulationSettings.settings["enemyArmor"])" class="settings-right" type="number" min='0' max='10000' name="enemyArmor">
        </li>
        @if (AuraGroups.SelectedAuras.Contains("curseOfTheElements"))
        {
            <li id="improvedCurseOfTheElements">
                <label class="settings-left">Malediction?</label>
                <select @bind="@(SimulationSettings.settings["improvedCurseOfTheElements"])" class="settings-right" name="improvedCurseOfTheElements">
                    <option value='0'>No</option>
                    <option value='1'>1/3</option>
                    <option value='2'>2/3</option>
                    <option value='3'>3/3</option>
                </select>
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("bloodlust"))
        {
            <li id="bloodlustAmount">
                <label class="settings-left" for="bloodlustAmount">Bloodlust amount</label>
                <select @bind="@(SimulationSettings.settings["bloodlustAmount"])" class="settings-right" name="bloodlustAmount">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                </select>
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("prayerOfSpirit"))
        {
            <li id="improvedDivineSpirit">
                <label class="settings-left" for="improvedDivineSpirit">Improved Divine Spirit?</label>
                <select @bind="@(SimulationSettings.settings["improvedDivineSpirit"])" class="settings-right" name="improvedDivineSpirit">
                    <option value="0">No</option>
                    <option value="1">1/2</option>
                    <option value="2">2/2</option>
                </select>
            </li>
        }
        <!--<li id="conflagrateUse">
        <label class="settings-left" for="conflagrateUse">When to use Conflagrate?</label>
        <select class="settings-right" name="conflagrateUse">
            <option value="onCooldown">As soon as it's ready</option>
            <option value="immolateAlmostOut">When Immolate has almost run out</option>
        </select>
    </li>-->
        @if (AuraGroups.SelectedAuras.Contains("powerOfTheGuardianMage"))
        {
            <li id="mageAtieshAmount">
                <label class="settings-left" for="mageAtieshAmount">Mage Atiesh amount</label>
                <select @bind="@(SimulationSettings.settings["mageAtieshAmount"])" class="settings-right" name="mageAtieshAmount">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                </select>
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("powerOfTheGuardianWarlock"))
        {
            <li id="warlockAtieshAmount">
                <label class="settings-left" for="warlockAtieshAmount">Warlock Atiesh amount</label>
                <select @bind="@(SimulationSettings.settings["warlockAtieshAmount"])" class="settings-right" name="warlockAtieshAmount">
                    <option disabled="disabled" value="0">Do not count your own Atiesh!!!</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                </select>
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("totemOfWrath"))
        {
            <li id="totemOfWrathAmount">
                <label class="settings-left" for="totemOfWrathAmount">Totem of Wrath amount</label>
                <select @bind="@(SimulationSettings.settings["totemOfWrathAmount"])" class="settings-right" name="totemOfWrathAmount">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                </select>
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("vampiricTouch"))
        {
            <li id='shadowPriestDps'>
                <label class="settings-left" for="shadowPriestDps">Shadow Priest Dps</label>
                <input @bind="@(SimulationSettings.settings["shadowPriestDps"])" class='settings-right' type="number" min='0' name="shadowPriestDps">
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("faerieFire"))
        {
            <li id='improvedFaerieFire'>
                <label class='settings-left' for="improvedFaerieFire">Improved Faerie Fire?</label>
                <select @bind="@(SimulationSettings.settings["improvedFaerieFire"])" class='settings-right' name='improvedFaerieFire'>
                    <option value='no'>No</option>
                    <option value='yes'>Yes</option>
                </select>
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("exposeArmor"))
        {
            <li id='improvedExposeArmor'>
                <label class='settings-left' for="improvedExposeArmor">Improved Expose Armor?</label>
                <select @bind="@(SimulationSettings.settings["improvedExposeArmor"])" class='settings-right' name='improvedExposeArmor'>
                    <option value='0'>No</option>
                    <option value='1'>1/2</option>
                    <option value='2'>2/2</option>
                </select>
            </li>
        }
        @if (AuraGroups.SelectedAuras.Contains("exposeWeakness"))
        {
            <li id='survivalHunterAgility'>
                <label class="settings-left" for="survivalHunterAgility">Survival Hunter Agility</label>
                <input @bind="@(SimulationSettings.settings["survivalHunterAgility"])" class='settings-right' type="number" min='0' name="survivalHunterAgility">
            </li>
            <li id='exposeWeaknessUptime'>
                <label class="settings-left" for="exposeWeaknessUptime">Expose Weakness Uptime %</label>
                <input @bind="@(SimulationSettings.settings["exposeWeaknessUptime"])" class='settings-right' type="number" min='0' name="exposeWeaknessUptime">
            </li>
        }
        <li id="customIsbUptime">
            <label class="settings-left" for="customIsbUptime">Use custom ISB uptime %?</label>
            <select @bind="@(SimulationSettings.settings["customIsbUptime"])" class="settings-right" name="customIsbUptime">
                <option value="yes">Yes</option>
                <option value="no">No</option>
            </select>
        </li>
        @if (SimulationSettings.settings["customIsbUptime"] == "yes")
        {
            <li id="custom-isb-uptime-value">
                <span class="settings-left">Custom ISB Uptime %</span>
                <input @bind="@(SimulationSettings.settings["customIsbUptimeValue"])" id="customIsbUptimeValue" type="number" name="customIsbUptimeValue" class="settings-right">
            </li>
        }
    </ul>
</section>

@code {
    [Parameter] public EventCallback RefreshRotationSpells { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await localStorage.ContainKeyAsync("settings"))
        {
            SimulationSettings.settings = await localStorage.GetItemAsync<Dictionary<string, string>>("settings");
        }
    }

    // Anytime the settings are changed, the component is re-rendered, so we can use this to save the settings.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && SimulationSettings.settings.Count > 0)
        {
            await localStorage.SetItemAsync("settings", SimulationSettings.settings);
        }
    }

    public void ReRender()
    {
        StateHasChanged();
    }

    private bool ShowSacrificePetOption()
    {
        return TalentTree.CurrentTalents.ContainsKey("demonicSacrifice") && TalentTree.CurrentTalents["demonicSacrifice"] == 1;
    }

    private bool ShowPetModeOption()
    {
        return !ShowSacrificePetOption() || SimulationSettings.settings["sacrificePet"] == "no";
    }
}