@using Classes
@using Classes.UI
@using ViewModels.Interfaces 

@inject ISidebarViewModel SidebarVM; 

<p id="character-race"><span id="race"></span> Warlock</p>
<p id="character-level">Level 70</p>

<ul class="character-stats">
    <li>
        <p class="character-stat">Health</p>
        <p class="character-stat-val" id="character-health-val">@(Math.Round(SidebarVM.Health))</p>
    </li>
    <li>
        <p class="character-stat">Mana</p>
        <p class="character-stat-val" id="character-mana-val">@(Math.Round(SidebarVM.Mana))</p>
    </li>
    <li>
        <p class="character-stat">Stamina</p>
        <p class="character-stat-val" id="character-stamina-val">@(Math.Round(SidebarVM.Stamina))</p>
    </li>
    <li>
        <p class="character-stat">Intellect</p>
        <p class="character-stat-val" id="character-intellect-val">@(Math.Round(SidebarVM.Intellect))</p>
    </li>
    <li>
        <p class="character-stat">Spirit</p>
        <p class="character-stat-val" id="character-spirit-val">@(Math.Round(SidebarVM.Spirit))</p>
    </li>
    <li>
        <p class="character-stat">Spell Power</p>
        <p class="character-stat-val" id="character-spell-power-val">@SidebarVM.SpellPower</p>
    </li>
    <li>
        <p class="character-stat">Shadow Power</p>
        <p class="character-stat-val" id="character-shadow-power-val">@SidebarVM.ShadowPower</p>
    </li>
    <li>
        <p class="character-stat">Fire Power</p>
        <p class="character-stat-val" id="character-fire-power-val">@SidebarVM.FirePower</p>
    </li>
    <li>
        <p class="character-stat">Crit Rating</p>
        <p class="character-stat-val" id="character-crit-val">@(SidebarVM.SpellCritRating) (@(Math.Round(SidebarVM.CritPercent * 100) / 100)%)</p>
    </li>
    <li>
        <p class="character-stat">Hit Rating</p>
        <p class="character-stat-val" id="character-hit-val">@(SidebarVM.SpellHitRating) (@(Math.Round(SidebarVM.HitPercent * 100) / 100)%)</p>
    </li>
    <li>
        <p class="character-stat">Haste Rating</p>
        <p class="character-stat-val" id="character-haste-val">@SidebarVM.SpellHasteRating</p>
    </li>
    <li>
        <p class="character-stat">Shadow Dmg %</p>
        <p class="character-stat-val" id="character-shadow-damage-modifier-val">@(Math.Round(SidebarVM.ShadowModifier * 100))%</p>
    </li>
    <li>
        <p class="character-stat">Fire Dmg %</p>
        <p class="character-stat-val" id="character-fire-damage-modifier-val">@(Math.Round(SidebarVM.FireModifier * 100))%</p>
    </li>
    <li>
        <p class="character-stat">MP5</p>
        <p class="character-stat-val" id="character-mp5-val">@SidebarVM.MP5</p>
    </li>
    <li>
        <p class="character-stat">Enemy Armor</p>
        <p class="character-stat-val" id="enemy-armor-val"></p>
    </li>
    <!--<li>
        <p class="character-stat">Spell Penetration</p>
        <p class="character-stat-val" id="character-spell-pen-val"></p>
    </li>-->
</ul>

@code {
    protected override void OnInitialized()
    {
        SidebarVM.PropertyChanged += (sender, e) => StateHasChanged();
    }
}